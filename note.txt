git config --global user.name "사용자명"
: 깃 저장소에서 사용할 사용자 정보 중 사용자명을 설정하는 깃 명령어

git config --global user.name "사용자메일"
:깃 저장소에서 사용할 사용자 정보 중 사용자 메일 주소를 설정하는 깃 명령어

git inint 
:터미널이 열려 있는 폴더를 깃 저장소로 초기화하는 깃 명령어

ls
:터미널이 열려 있는 폴더 내에 있는 항목들을 나열하는 시스템 명령어

git status
:깃 프로젝트 상태를 확인하는 깃 명령어

git add
:워킹 디렉터리 내 문서를 스테이징 영역에 추가하는 깃 명령어

git commit
:스테이징 영역 내에 대기 중인 문서를 리포지토리에 추가하는 깃 명령어

git commit -m"원하는 메세지"
: 메세지를 남겨 커밋 가능

git log 
:커밋한 수정 이력을 확인하는 깃 명령어

git log -p
: 커밋의 변경사항까지 함께 출력하는 옵션 (q를 눌러서 나감)

git log -(숫자)
: 커밋을 최신순으로 (숫자)개만큼 출력하는 옵션
+ [-p]와 [-(숫자)] 동시에 사용 가능

git log --online 
:각 커밋을 요약해 한 줄 씩 출력하는 옵션

git checkout 커밋해시
: 문서 내용을 특정 커밋의 내요으로 되돌리는 깃 명령어

git reflog
:HEAD 포인터의 참조 이력을 출력하는 깃 명령어

[커밋할 생각이 없는데 스테이징 해버렸다?]
-실수로 git add 명령을 수행 해버린 경우, git reset 명령어를 수행하면 스테이징에 올라가 있던 파일을 초기화 할 수 있다. 즉, 워킹 디렉터리로 되돌릴 수 있다.

[커밋 하면 안되는 사항인데 커밋 해버렸다.]
-실수로 git commit 명령을 수행 해버려 잘못된 커밋 이력이 추가된 경우, git reset 명령어와 커밋 해시를 함께 입력하면 커밋 이력 되돌리기가 수행된다. git reset 커밋 되돌리기를 수행할 때는 세가지 옵션 중 하나를 선택할 수 있다.
--hard, --mixed, --soft

--soft :워킹 디렉터리 (현 상태 유지) / 스테이징 영역(현 상태 유지) / 리포지토리 (커밋 이동)
--mixed :워킹 디렉터리 (현 상태 유지) / 스테이징 영역(스테이징 초기화) / 리포지토리 (커밋 이동)
--hard :워킹 디렉터리 (이동한 커밋의 상태로 변경) / 스테이징 영역(스테이징 초기화) / 리포지토리 (커밋 이동)

[불필요한 수정 사항을 없애고 싶은데,이조차도 기록으로 남기고 싶다]
-git rever 명령은 특정 커밋의 수정 사항을 되돌리되, '커밋 수정 사항을 되돌렸다'라는 사실을 이력으로 남기는 명령이다. 따라서 이를 수행하면 이력 (커밋해시)이 줄어드는게 아니라, 오히려 늘어난다.
ex) git revert 321abcd =>321abcd 커밋을 없애거나 되돌리는게 아니다. 해당 커밋에서 기록된 수정 사항을 되돌리는 것이다.

1. 스테이징 실수를 되돌리기
git reset 파일명

2. 커밋 실수를 되돌리기
git reset 커밋해시 --옵션

3. 커밋 실수 되돌리되 이를 기록하기
git revert 커밋해시